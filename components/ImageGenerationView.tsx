import React, { useState } from 'react';

interface ImageGenerationViewProps {
  onGenerate: (prompt: string) => void;
  onBack: () => void;
  isGenerating: boolean;
  generatedImage: string | null; // base64
  remainingGenerations: number;
}

const LoadingSpinner: React.FC = () => (
    <div className="w-20 h-20">
        <svg className="w-full h-full animate-spin" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="spinner-gradient-img" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style={{ stopColor: 'rgb(96, 165, 250)', stopOpacity: 1 }} />
                    <stop offset="100%" style={{ stopColor: 'rgb(56, 189, 248)', stopOpacity: 1 }} />
                </linearGradient>
            </defs>
            <circle
                cx="50"
                cy="50"
                r="45"
                fill="none"
                stroke="url(#spinner-gradient-img)"
                strokeWidth="5"
                strokeLinecap="round"
                strokeDasharray="160"
                strokeDashoffset="100"
            />
        </svg>
    </div>
);

const DownloadIcon: React.FC = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>;

export const ImageGenerationView: React.FC<ImageGenerationViewProps> = ({ onGenerate, onBack, isGenerating, generatedImage, remainingGenerations }) => {
    const [prompt, setPrompt] = useState('');

    const handleGenerateClick = () => {
        if (prompt.trim()) {
            onGenerate(prompt.trim());
        }
    };

    const handleDownload = () => {
        if (!generatedImage) return;
        const link = document.createElement('a');
        link.href = `data:image/jpeg;base64,${generatedImage}`;
        link.download = `brevetai-image-${Date.now()}.jpeg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const hasGenerationsLeft = remainingGenerations > 0;

    return (
        <div className="w-full max-w-2xl mx-auto h-full flex flex-col">
            <div className="bg-slate-100/60 dark:bg-slate-800/50 backdrop-blur-2xl border border-slate-200/60 dark:border-slate-700/50 p-6 sm:p-8 rounded-3xl shadow-xl flex-grow flex flex-col">
                <header className="flex items-center gap-4 pb-4 border-b border-white/20 dark:border-slate-700 mb-6">
                    <button onClick={onBack} title="Retour" className="p-2 rounded-full text-slate-600 dark:text-slate-400 hover:bg-black/10 dark:hover:bg-slate-800 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" /></svg>
                    </button>
                    <h2 className="text-3xl font-bold text-slate-900 dark:text-slate-100">Générer une image</h2>
                </header>

                <main className="flex-grow flex flex-col justify-center items-center">
                    {isGenerating ? (
                        <div className="flex flex-col items-center justify-center text-center space-y-6 p-8">
                            <LoadingSpinner />
                            <h3 className="text-2xl font-bold text-slate-900 dark:text-slate-100">Génération de l'image en cours...</h3>
                            <p className="text-slate-700 dark:text-slate-400 max-w-sm">BrevetAI dessine votre création. Cela peut prendre un instant.</p>
                        </div>
                    ) : generatedImage ? (
                        <div className="w-full flex flex-col items-center gap-6">
                            <img src={`data:image/jpeg;base64,${generatedImage}`} alt="Generated by BrevetAI" className="rounded-2xl shadow-lg max-w-full max-h-[50vh] object-contain" />
                            <button onClick={handleDownload} className="flex items-center justify-center px-6 py-3 bg-indigo-500 text-white font-bold rounded-xl shadow-lg hover:bg-indigo-600 transform hover:scale-105 transition-all">
                                <DownloadIcon />
                                Télécharger
                            </button>
                        </div>
                    ) : (
                        <div className="w-full space-y-4">
                             <p className="text-center text-slate-700 dark:text-slate-300">
                                Générations restantes aujourd'hui : <span className="font-bold text-indigo-500 dark:text-sky-300">{isFinite(remainingGenerations) ? remainingGenerations : 'Illimitées'}</span>
                            </p>
                            <textarea
                                rows={3}
                                value={prompt}
                                onChange={(e) => setPrompt(e.target.value)}
                                className="w-full p-3 bg-white/20 dark:bg-slate-800/60 backdrop-blur-lg border border-white/20 dark:border-slate-700 rounded-xl shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 text-base placeholder-slate-600 dark:placeholder-slate-500 transition"
                                placeholder="Décrivez l'image que vous souhaitez créer..."
                            />
                            <button
                                onClick={handleGenerateClick}
                                disabled={!prompt.trim() || !hasGenerationsLeft}
                                className="w-full px-8 py-4 bg-indigo-500 text-white font-bold rounded-xl shadow-lg hover:bg-indigo-600 transform hover:scale-105 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:scale-100"
                            >
                                {hasGenerationsLeft ? 'Générer' : 'Limite atteinte'}
                            </button>
                        </div>
                    )}
                </main>
            </div>
        </div>
    );
};